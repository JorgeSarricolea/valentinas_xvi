---
import "../styles/gift-suggestion.css";
import { animateWords } from "../utils/animations.js";

const giftTitle = "Lluvia de Sobres";
const giftDescription =
  "Si deseas hacerme un regalo, un detalle en efectivo o tarjetas de regalo sería muy especial";
const emailText = "Mi correo para las tarjetas de regalo es: ";
const email = "diazguerravalentina1@gmail.com";

// Gift card options with denominations
const giftCards = [
  {
    name: "Amazon",
    color: "#000000",
    textColor: "#ff9900",
    denominations: ["$1000", "$2000", "$3000"],
    description: "Tarjeta de regalo para comprar en línea",
    link: "https://www.amazon.com.mx/Tarjeta-de-Regalo-Digital-Amazon-com-mx/dp/B07PMMFSPC/ref=lp_19117234011_1_2?pf_rd_p=a8422b71-27d5-4a7d-8254-0c9e97c83f02&pf_rd_r=7JJ8AN2Q8T1D9GX0AH2V&sbo=RZvfv%2F%2FHxDF%2BO5021pAnSA%3D%3D",
  },
  {
    name: "Liverpool",
    color: "#e10098",
    textColor: "#ffffff",
    denominations: ["$1000", "$2000", "$3000"],
    description: "Tarjeta de regalo para tienda departamental",
    link: "https://www.liverpool.com.mx/tienda/browse/storelocator",
  },
  {
    name: "Coppel",
    color: "#14549C",
    textColor: "#ffffff",
    denominations: ["4169 1614 7144 2565", "", ""],
    description: "Luz Viridiana Guerra García",
    isCopyable: true,
  },
];
---

<section class="gift-section section" id="gift">
  <div class="section-content scroll-animate" data-animation="fade-up">
    <h2 class="letter-container">
      <span class="letter-animate" style="transition-delay: 0.05s;">R</span>
      <span class="letter-animate" style="transition-delay: 0.1s;">E</span>
      <span class="letter-animate" style="transition-delay: 0.15s;">G</span>
      <span class="letter-animate" style="transition-delay: 0.2s;">A</span>
      <span class="letter-animate" style="transition-delay: 0.25s;">L</span>
      <span class="letter-animate" style="transition-delay: 0.3s;">O</span>
      <span class="letter-animate" style="transition-delay: 0.35s;">S</span>
    </h2>

    <div class="gift-container scroll-animate" data-animation="fade-up">
      <div class="envelope-animation">
        <div class="envelope">
          <div class="envelope-flap"></div>
          <div class="envelope-cover"></div>
          <div class="envelope-letter">
            <p class="gift-title">{giftTitle}</p>
          </div>
        </div>
        <div class="falling-money"></div>
      </div>

      <p
        class="gift-description word-container"
        set:html={animateWords(giftDescription, 0.2)}
      />
      <div class="email-container">
        <p class="gift-description">
          <span set:html={animateWords(emailText, 0.2)} />
          <span class="email-copy-wrapper">
            <span class="email-text" set:html={animateWords(email, 0.2)} />
            <button class="email-copy-button" aria-label="Copiar correo">
              <svg
                class="copy-icon"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path
                  d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
                ></path>
              </svg>
              <svg
                class="check-icon"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <polyline points="20 6 9 17 4 12"></polyline>
              </svg>
            </button>
          </span>
        </p>
      </div>

      <div class="gift-cards-container scroll-animate" data-animation="fade-up">
        {
          giftCards.map((card, cardIndex) => (
            <div
              class="gift-card-stack"
              style={`animation-delay: ${cardIndex * 0.2}s`}
            >
              <div class="gift-card-stack-inner">
                {card.denominations.map((amount, index) => (
                  <a
                    href={card.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    class={`amazon-gift-card ${card.isCopyable ? "copyable" : ""}`}
                    style={`--rotation: ${(index - 1) * 5}deg; --y-offset: ${index * 10}px; z-index: ${3 - index}; animation-delay: ${index * 0.1 + cardIndex * 0.2}s;`}
                    data-value={card.isCopyable ? amount : null}
                    data-name={card.isCopyable ? card.description : null}
                  >
                    <div
                      class="amazon-gift-card-inner"
                      style={`background-color: ${card.color};`}
                    >
                      <div class="amazon-gift-card-logo">
                        {card.name === "Amazon" ? (
                          <>
                            <span class="amazon-logo">amazon</span>
                            <span
                              class="gift-card-text"
                              style={`color: ${card.textColor};`}
                            >
                              gift card
                            </span>
                          </>
                        ) : (
                          <>
                            <span
                              class="liverpool-logo"
                              style={`color: ${card.textColor};`}
                            >
                              {card.name}
                            </span>
                            {card.name === "Liverpool" && (
                              <span
                                class="gift-card-text"
                                style={`color: ${card.textColor}; opacity: 0.8;`}
                              >
                                gift card
                              </span>
                            )}
                          </>
                        )}
                        {card.isCopyable && (
                          <span
                            class="account-holder"
                            style={`color: ${card.textColor}; opacity: 0.8;`}
                          >
                            {card.description}
                          </span>
                        )}
                      </div>
                      <div
                        class="amazon-gift-card-amount"
                        style={`color: ${card.textColor};`}
                      >
                        {amount}
                      </div>
                      {card.isCopyable && (
                        <div class="copy-button">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="16"
                            height="16"
                            fill="currentColor"
                            viewBox="0 0 16 16"
                          >
                            <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z" />
                            <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z" />
                          </svg>
                        </div>
                      )}
                    </div>
                  </a>
                ))}
              </div>
            </div>
          ))
        }
      </div>
      <div class="copy-notification">¡Copiado al portapapeles!</div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const envelope = document.querySelector(".envelope");
    const fallingMoney = document.querySelector(".falling-money");
    const copyableCards = document.querySelectorAll(
      ".amazon-gift-card.copyable"
    );
    const copyNotification = document.querySelector(".copy-notification");
    const emailCopyButton = document.querySelector(".email-copy-button");
    const emailText = document.querySelector(".email-text");

    // Email copy functionality
    if (emailCopyButton && emailText) {
      emailCopyButton.addEventListener("click", function () {
        const textToCopy = emailText.textContent || "";

        navigator.clipboard
          .writeText(textToCopy)
          .then(() => {
            // Show success notification
            copyNotification?.classList.add("show");
            setTimeout(() => {
              copyNotification?.classList.remove("show");
            }, 2000);

            // Change button to check icon
            emailCopyButton.classList.add("copied");

            // Change back to copy icon after 2 seconds
            setTimeout(() => {
              emailCopyButton.classList.remove("copied");
            }, 2000);
          })
          .catch((err) => {
            console.error("Error copying email: ", err);
          });
      });
    }

    // Create falling money animation
    function createMoneyRain() {
      for (let i = 0; i < 15; i++) {
        const money = document.createElement("div");
        money.classList.add("money");
        money.style.left = `${Math.random() * 100}%`;
        money.style.animationDelay = `${Math.random() * 5}s`;
        money.style.animationDuration = `${Math.random() * 3 + 2}s`;
        fallingMoney?.appendChild(money);
      }
    }

    // Envelope animation on scroll
    const envelopeObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            envelope?.classList.add("active");
            setTimeout(createMoneyRain, 1000);
          } else {
            envelope?.classList.remove("active");
            if (fallingMoney) {
              fallingMoney.innerHTML = "";
            }
          }
        });
      },
      { threshold: 0.5 }
    );

    const giftSection = document.querySelector(".gift-section");
    if (giftSection) {
      envelopeObserver.observe(giftSection);
    }

    // Copy to clipboard functionality
    const copyButtons = document.querySelectorAll(".copy-button");
    copyButtons.forEach((button) => {
      button.addEventListener("click", function (this: HTMLElement, e: Event) {
        e.preventDefault();
        e.stopPropagation();

        const card = this.closest(".amazon-gift-card") as HTMLElement;
        const textToCopy = card.getAttribute("data-value");
        const nameToCopy = card.getAttribute("data-name");

        if (textToCopy) {
          // Create a formatted text with both name and CLABE
          const fullText = `Nombre: ${nameToCopy}\nNúmero de tarjeta: ${textToCopy}`;

          navigator.clipboard
            .writeText(fullText)
            .then(() => {
              copyNotification?.classList.add("show");
              setTimeout(() => {
                copyNotification?.classList.remove("show");
              }, 2000);
            })
            .catch((err) => {
              console.error("Error copying text: ", err);
            });
        }
      });
    });

    // Add intersection observer for animation
    const cardAnimationObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            giftSection?.classList.add("in-view");
          } else {
            giftSection?.classList.remove("in-view");
          }
        });
      },
      { threshold: 0.2 }
    );

    if (giftSection) {
      cardAnimationObserver.observe(giftSection);
    }
  });
</script>
